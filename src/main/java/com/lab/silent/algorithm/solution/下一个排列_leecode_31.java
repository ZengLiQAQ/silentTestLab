package com.lab.silent.algorithm.solution;

/**
 * 整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
 *
 * 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
 * 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
 *
 * 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
 * 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
 * 而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
 * 给你一个整数数组 nums ，找出 nums 的下一个排列。
 *
 * 必须 原地 修改，只允许使用额外常数空间。
 *
 *
 *
 * 示例 1：
 *
 * 输入：nums = [1,2,3]
 * 输出：[1,3,2]
 * 示例 2：
 *
 * 输入：nums = [3,2,1]
 * 输出：[1,2,3]
 * 示例 3：
 *
 * 输入：nums = [1,1,5]
 * 输出：[1,5,1]
 *
 *
 * 提示：
 *
 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 100
 */
public class 下一个排列_leecode_31 {

    /**
     * 核心思路:
     *    下一个排列,指的是尽可能小的增加当前序列的值,即让增大数字的位置尽可能的靠后
     *    1.明确极限场景下,如果一段子数组都是倒序的,那么说明该子数组已经无法通过改变位置来增大了: 如 61542, 其中542 最大就是 542
     *    那么就只能增大前面一个元素了,假设这个位置的值是 a
     *    2.如果要尽可能小的增大值,就需要找到后缀的倒序子数组中找到最小的大于a的值,并与a的位置互换: 61542 -> 62541
     *    3.最后对原来的子数组的值镜像升序,即可变成最小幅度的增大
     * @param nums
     */
    public void nextPermutation(int[] nums) {
        if(nums.length == 1 || nums.length == 0) return;
        int i = nums.length - 2;
        //从右向左找到降序的子数组的起始位置
        while (i >= 0 && nums[i] >= nums[i + 1])
            i--;
        //降序子数组前面存在一个值,满足 ^ 折线的场景
        for (int j = nums.length - 1; i >= 0 && j > i; j--){
            //从右往左找到恰好大于nums[i]值
            if (nums[j] > nums[i]){
                //交换两个数字的位置
                swap(nums, i, j);
                break;
            }
        }
        //其中如果i<0,说明该数组都是降序的,则从直接翻转整个数组即可,否则就反转子数组
        reverse(nums,i+1,nums.length-1);
    }

    /**
     * 翻转指定位置的子数组
     */
    public void reverse(int[] nums,int l,int r){
        while (l<=r){
            swap(nums, l, r);
            l++;
            r--;
        }
    }

    private static void swap(int[] nums, int l, int r) {
        int tmp = nums[l];
        nums[l] = nums[r];
        nums[r] = tmp;
    }
}
